<?xml version="1.0" encoding="UTF-8"?>
<sci:data xmlns:sci="http://www.SciTegic.com/" object="SciTegic.EvaluateExpression.1">
	<sci:component name="Parse Synonyms" version="2">
		<sci:arg name="Synonyms Property" type="StringType" required="true" visibility="visible" multi="false" expanded="true">
			<sci:help>The name of the property which contains the synonyms. The default value here is &lt;b&gt;synonyms&lt;/b&gt;.</sci:help>
			<sci:value>synonyms</sci:value>
		</sci:arg>
		<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}" uimpl="true">
			<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
			<sci:member>Initial Expression</sci:member>
			<sci:member>Final Expression</sci:member>
			<sci:member>Keep Calculated Properties</sci:member>
			<sci:value>/*
Examples:
(u&apos;PDB Chemical Component code: AC0&apos;,)
(u&quot;6&apos;-O-Trityl-\u03b1-cellobiose hepta-acetate&quot;,)
(u&apos;N-Acetyl-lactosamine monohydrate&apos;, u&apos;PDB Chemical Component code: NLC&apos;)
*/
If Property(#pSyn) Is Defined Then
	#synonyms := Property(#pSyn);
	
	If #synonyms Eq &apos;()&apos; Then
		// Empty
		#synonyms := &apos;&apos;;
	Else
		// Remove leading (u&apos; or (u&quot;
		#synonyms := RSubst(#synonyms, &apos;^\(u(&apos;&apos;|&quot;)&apos;, &apos;&apos;);
		// Remove trailing &apos;) or &quot;)  - optionally with comma
		#synonyms := RSubst(#synonyms, &apos;(&apos;&apos;|&quot;),?\)$&apos;, &apos;&apos;);
		// Split on &apos;, u&apos; or &quot;, u&quot; or any combination of &apos; and &quot;
		#synonyms := RSplit(#synonyms, &apos;(&apos;&apos;|&quot;), u(&apos;&apos;|&quot;)&apos;, &apos;g&apos;);
	End If;
	
	Property(#pSyn) := #synonyms;
End If;</sci:value>
		</sci:arg>
		<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}" uimpl="true">
			<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
			<sci:value>#pSyn := Parameter(&apos;Synonyms Property&apos;);</sci:value>
		</sci:arg>
		<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}" uimpl="true">
			<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
		</sci:arg>
		<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}" uimpl="true">
			<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
			<sci:legalval selected="true">True</sci:legalval>
			<sci:legalval>False</sci:legalval>
		</sci:arg>
		<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
			<sci:help>Component Attributes</sci:help>
			<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
			<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
			<sci:legalval>ComponentReturnsFail</sci:legalval>
			<sci:legalval>ComponentRunsLocal</sci:legalval>
		</sci:arg>
		<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
			<sci:legalval selected="true">Halt</sci:legalval>
			<sci:legalval>Fail</sci:legalval>
			<sci:legalval>Pass</sci:legalval>
		</sci:arg>
		<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
			<sci:legalval selected="true">Halt</sci:legalval>
			<sci:legalval>Fail</sci:legalval>
			<sci:legalval>Pass</sci:legalval>
		</sci:arg>
		<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
		<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
			<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
			<sci:legalval>True</sci:legalval>
			<sci:legalval selected="true">False</sci:legalval>
		</sci:arg>
		<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
			<sci:help>Version of expression parser to use.</sci:help>
			<sci:value>2</sci:value>
		</sci:arg>
		<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:help>The user who registered this component.</sci:help>
			<sci:value>ccdc/csd</sci:value>
		</sci:arg>
		<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:help>The date this component was registered.</sci:help>
			<sci:value>Fri Nov 22 11:04:04 2019</sci:value>
		</sci:arg>
		<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:value>Parse Synonyms</sci:value>
		</sci:arg>
		<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
			<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
			<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
		</sci:arg>
		<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:help>The component this component is based upon.</sci:help>
			<sci:value>Custom Manipulator (PilotScript)</sci:value>
		</sci:arg>
		<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
			<sci:value>ComponentNode</sci:value>
		</sci:arg>
		<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
			<sci:value>0</sci:value>
		</sci:arg>
		<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:value>{93A7ED79-30B5-4F32-90F7-0ECA4726ABC3}</sci:value>
		</sci:arg>
		<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:value>1242 -95</sci:value>
		</sci:arg>
		<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
			<sci:value>100</sci:value>
			<sci:value>Parse Synonyms Property</sci:value>
			<sci:value>The synonyms property, if used, comes back as an encoded Python string.
It is more or less readable, but contains markup related to how Python converts objects and lists to
string. This component translates those strings to more formal strings, and, where multiple synonyms
are found, converts the property into an array.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(u&apos;N-Acetyl-lactosamine monohydrate&apos;, u&apos;PDB Chemical Component code: NLC&apos;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above contains 2 separate synonyms for a structure. This leads the synonym property, defined by the &lt;i&gt;Synonyms Property&lt;/i&gt; parameter, being converted to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;N-Acetyl-lactosamine monohydrate
PDB Chemical Component code: NLC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This component will not convert any Unicode found in these properties. To do this, use the &lt;a href=&quot;javascript:DoLink(&apos;{B0822C9A-EC56-4FB3-B7ED-D0C016C70127}&apos;)&quot;&gt;Convert Unicode Characters&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
			<sci:value>Generic</sci:value>
			<sci:value/>
			<sci:value>Generic</sci:value>
			<sci:value/>
			<sci:value>None</sci:value>
			<sci:value/>
		</sci:arg>
		<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:help>The server version when this component was registered</sci:help>
			<sci:value>19.1.0.1963</sci:value>
		</sci:arg>
		<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
		<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
			<sci:help>Local Component Identifier</sci:help>
			<sci:value>13</sci:value>
		</sci:arg>
		<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
			<sci:help>The original path within the database of this component.</sci:help>
			<sci:value>fatkinson\ccdc\csd\xml\Components\CSD\Manipulators\Parse Synonyms</sci:value>
		</sci:arg>
	</sci:component>
</sci:data>
